name: Windows Testflight

on:
  push:
    branches:
      - windows/beta
      - windows/release
      - windows/nightly
    tags:
      - v**
  pull_request:

  workflow_dispatch:
    inputs:
      ref:
        description: "Name of the branch"
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    env:
      Solution_Name: iPlay
      Project_Directory: iPlay.X
    runs-on: windows-2022
    # runs-on: self-hosted
    steps:          
      - name: üå∏ Checkout
        uses: actions/checkout@v4
        with:
          repository: "saltpi/iPlay.X"
          ref: feature/aot
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }} 

      - name: üë∑ Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2
        
      - name: ‚è∞ Cache
        uses: actions/cache@v4
        with:
          path: ~\.nuget\packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: ‚è¨ Install deps
        run: |
          # nuget install X.Player\packages.config
          nuget restore X.Player\X.Player.vcxproj -OutputDirectory packages
        shell: pwsh

      - name: ‚úÖ Decode and Import Certificate
        run: |
          $base64Data = "${{ secrets.CERTIFICATE_PFX }}"
          $bytes = [Convert]::FromBase64String($base64Data)
          $certificatePath = Join-Path -Path ${{ github.workspace }} -ChildPath signing_cert.pfx
          [System.IO.File]::WriteAllBytes("$certificatePath", $bytes)
          Import-PfxCertificate -FilePath "$certificatePath" -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String "${{ secrets.CERTIFICATE_PASSWORD }}" -Force -AsPlainText)
        shell: pwsh

      - name: ‚úÖ Verify Certificate Installation
        run: |
          Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq "028ACD7A6EF34F66E29087B84A40B6579187570B" }
        shell: pwsh

    # https://github.com/andrewleader/WindowsAppSDKGallery/blob/main/.github/workflows/dotnet-desktop.yml#L102
      - name: üß¨ Build store package
        run: |
          .\Desktop\version.ps1
          msbuild .\Desktop\Desktop.csproj `
            /m `
            /p:Configuration="release" `
            /p:Platform="x64" `
            /p:RuntimeIdentifier="win-x64" `
            /p:AppxBundlePlatforms="x64|ARM64" `
            /p:AppxBundle=Never `
            /p:UapAppxPackageBuildMode=StoreUpload `
            /p:PackageOptionalProjectsInIdeBuilds=False `
            /p:AppxPackageSigningEnabled=true `
            /p:GenerateAppxPackageOnBuild=true `
            --restore
          msbuild .\Desktop\Desktop.csproj `
            /m `
            /p:Configuration="release" `
            /p:Platform="ARM64" `
            /p:RuntimeIdentifier="win-arm64" `
            /p:AppxBundle=Never `
            /p:AppxBundlePlatforms="x64|ARM64" `
            /p:UapAppxPackageBuildMode=StoreUpload `
            /p:PackageOptionalProjectsInIdeBuilds=False `
            /p:AppxPackageSigningEnabled=true `
            /p:GenerateAppxPackageOnBuild=true `
            --restore
          cd .\Desktop
          .\merge_zip.ps1
          .\merge_appx.ps1
        shell: pwsh

      - name: üéâ Release Notes
        run: |
          echo "version_code=$(git rev-list --count HEAD)" >> $GITHUB_ENV
          echo "build_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo version_name="v1.0 $(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash

      - name: ‚è´ Upload to Onedrive
        run: |
          version_code="$(git rev-list --count HEAD)"
          buildtime=$(date '+%Y%m%d.%H%M')
          mkdir -p Desktop/Publish
          cp "Desktop/AppPackages/ZipPackages/iPlayX_1.0.${version_code}.0_ARM64_Sideload.zip" Desktop/Publish/
          cp "Desktop/AppPackages/ZipPackages/iPlayX_1.0.${version_code}.0_x64_Sideload.zip" Desktop/Publish/
          cp "Desktop/AppPackages/iPlayX_1.0.${version_code}.0.msixbundle" Desktop/Publish/
          python -m pip install requests
          python ./scripts/upload.py --url "https://drive.ourfor.top/od_bot/build/iPlay/1.0.${version_code}.0/iPlay_1.0.${version_code}.0.msixbundle" \
            --file "$PWD/Desktop/Publish/iPlayX_1.0.${version_code}.0.msixbundle" \
            --token "${{ secrets.CLIENT_ID }}"
          python ./scripts/upload.py --url "https://drive.ourfor.top/od_bot/build/iPlay/1.0.${version_code}.0/iPlayX_1.0.${version_code}.0_ARM64_Sideload.zip" \
            --file "$PWD/Desktop/Publish/iPlayX_1.0.${version_code}.0_ARM64_Sideload.zip" \
            --token "${{ secrets.CLIENT_ID }}"
          python ./scripts/upload.py --url "https://drive.ourfor.top/od_bot/build/iPlay/1.0.${version_code}.0/iPlayX_1.0.${version_code}.0_x64_Sideload.zip" \
            --file "$PWD/Desktop/Publish/iPlayX_1.0.${version_code}.0_x64_Sideload.zip" \
            --token "${{ secrets.CLIENT_ID }}"
          ls Desktop/Publish
        shell: bash
      
      - name: ‚¨ÜÔ∏è Submit to Microsoft Store
        uses: ourfor/windows-store-action@1.0.5
        with:
          tenant-id: "f11cb049-47ea-4ac4-b157-de33439868de"
          client-id: "${{ secrets.STORE_CLIENT_ID }}"
          client-secret: "${{ secrets.STORE_CLIENT_SECRET }}"
          package-path: "Desktop/Publish"
          app-id: "9NBZ2BXD4WFZ"
          flight-id: "cc78bd2f-f625-4e26-aeff-2ca1b3c486ab" # Beta
          # flight-id: "47fcb686-2a9d-437f-965f-1dcab3b37e31" # Nightly
          delete-packages: false
          packages-keep: true
          skip-polling: true

      - name: üßπ Remove Installed Certificate
        if: always()
        run: |
          $thumbprint = "028ACD7A6EF34F66E29087B84A40B6579187570B"
          $cert = Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Thumbprint -eq $thumbprint }
          if ($cert) {
            Remove-Item -Path "Cert:\CurrentUser\My\$thumbprint" -Force
            Write-Host "Certificate with thumbprint $thumbprint has been removed."
          } else {
            Write-Host "Certificate with thumbprint $thumbprint not found."
          }
        shell: pwsh
